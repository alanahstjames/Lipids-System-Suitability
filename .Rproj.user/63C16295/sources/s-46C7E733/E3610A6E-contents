---
title: "R Notebook"
output:
  html_document:
    self_contained: yes
    df_print: paged
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	echo = FALSE,
	fig.height = 25,
	fig.width = 16, 
	fig.align = 'center' 
)
```

```{r include=FALSE}
#library
library(plotly)
library(svDialogs)
library(shiny)
library(orca)
library(readxl)
library(htmlwidgets)
```

```{r include=FALSE}
#define 'not in' function
'%!in%' <- function(x,y)!('%in%'(x,y))
```


```{r include=FALSE}
#read in data
#take skyline report file
#master <- read.csv("F:\\MUMS data\\MUMS_LTRS\\2022-10-10_xskylineR_1_MUMS_LTRS_extended_boundaries.csv")
master <- read.csv("D:\\R2D2 vs C3PO comparison\\2022-11-15_xskylineR_1_R2D2 vs C3PO RnD.csv")
#colnames(master) <- gsub('skyline_report.','', colnames(master))

#read in transition list
transition_list <- read.csv("D:\\20220608-BusseltonComparison\\2021-09-21-LGW_lipid_mrm_transition_data.csv")

pos_method <- read_excel("D:\\R2D2 vs C3PO comparison\\methods\\R2D2_pos.xlsx", col_names = FALSE)
neg_method <- read_excel("D:\\R2D2 vs C3PO comparison\\methods\\R2D2_neg.xlsx", col_names = FALSE)

pos_SILs <- unique(pos_method$...6) %>% 
  subset(grepl('.IS', pos_method$...6))
pos_SILs <- gsub(".IS", "", pos_SILs)
pos_SILs <- gsub("Hd7", "", pos_SILs)
pos_SILs <- gsub("Hd9", "", pos_SILs)
pos_SILs <- gsub("H_d7", "", pos_SILs)
pos_SILs <- gsub("H_d9", "", pos_SILs)
pos_SILs <- gsub("NH4d7", "", pos_SILs)
pos_SILs <- gsub("NH4d9", "", pos_SILs)
pos_SILs <- gsub("[+]", "", pos_SILs)
pos_SILs <- gsub("/", "_", pos_SILs)

neg_SILs <- unique(neg_method$...6) %>% 
  subset(grepl('.IS', neg_method$...6))
neg_SILs <- gsub(".IS", "", neg_SILs)
neg_SILs <- gsub("Hd5", "", neg_SILs)
neg_SILs <- gsub("Hd7", "", neg_SILs)
neg_SILs <- gsub("Hd9", "", neg_SILs)
neg_SILs <- gsub("AcOd9", "", neg_SILs)
neg_SILs <- gsub("AcOd7", "", neg_SILs)
neg_SILs <- gsub("[+|-]", "", neg_SILs)
neg_SILs <- gsub("/", "_", neg_SILs)
```


```{r include=FALSE}
#keep only LTR samples
#make sure "-LTR" is in Filenames, or adjust string
ltrs <- master[grepl("LTR", master$File.Name)==TRUE,]
#keep only SIL values
ltrs_SIL <- ltrs[grepl("SIL", ltrs$Molecule.Name)==TRUE,]
rm(master)
```



```{r include=FALSE}
#list of all ISTD
ISTDs <- unique(ltrs_SIL$Molecule.Name)
#find analogue names from list of ISTDs
analogue_names1 <- gsub('SIL_','', ISTDs)
analogue_names_final <- gsub('_d.*', '', analogue_names1)

#print ISTDs that don't have analogues in the method
missing_analogues <- setdiff(analogue_names_final, unique(ltrs$Molecule.Name))
message("indices of missing analogues")
missing_analogues_idx <- which(analogue_names_final %!in% unique(ltrs$Molecule.Name))
missing_analogues_idx
message("ISTDs that have no analogue")
ISTDs_missing_analogues <- ISTDs[missing_analogues_idx]
ISTDs_missing_analogues
```

```{r include=FALSE}
#make array of ISTDs and their analogues
ISTD_analogue_array <- data.frame(ISTD = ISTDs, Analogue = analogue_names_final)

#manually change analyte for those ISTDs with no analogue
for (x in 1:length(ISTDs)) {
  if (x %in% missing_analogues_idx) {
    ISTD_analogue_array[x, 2] <- 'remove'
  }
}
#replace any 'remove' for NA
for (x in 1:nrow(ISTD_analogue_array)) {
  if (ISTD_analogue_array[x, 2] %in% c("remove", "'remove'")) {
    ISTD_analogue_array[x, 2] <- NA
  }
}

#replace SIL_SM(18:1)_d9_SPLASH row with NA
ISTD_analogue_array[which(ISTD_analogue_array[, 1]=="SIL_SM(18:1)_d9_SPLASH"), ] =NA

#remove NA rows
ISTD_analogue_array <- na.omit(ISTD_analogue_array)
```

```{r include=FALSE}
#list ISTDs and analogues
unique(ISTD_analogue_array)

ISTD_analogue_array$Analogue %in% ltrs$Molecule.Name == TRUE
```

```{r include=FALSE}
#get the user to input some info about the cohort
# n_ltrs_per_plate <- NULL
# 
# n_plates <- as.numeric(dlgInput(message = "Please input the number of plates present in the data.", default = "")$res)
# 
# same_n_ltrs_in_each_plate <- dlgInput(message = "Is there an equal number of LTRs present in each plate?", default = "Y/N")$res
# 
# if (same_n_ltrs_in_each_plate == "Y") {
#   n_ltrs_per_plate <- rep(as.numeric(dlgInput(message = "How many LTRs in each plate?", default = "")$res), n_plates)
# } else {
#     for (x in 1:n_plates) {
#       n_ltrs_per_plate[x] <- as.numeric(dlgInput(message = paste("How many LTRs in plate ", x, "?"), default = "")$res)
#     }
#   }

n_plates <- 4
n_ltrs_per_plate <- c(29, 19, 29, 29)
```

```{r echo=FALSE}
SILs <- unique(ISTD_analogue_array$ISTD)
SILs_edited <- gsub("_d5", "", SILs)
SILs_edited <- gsub("_d7", "", SILs_edited)
SILs_edited <- gsub("_d9", "", SILs_edited)
SILs_edited <- gsub("SIL_", "", SILs_edited)

sample_id <- c(1:(nrow(ltrs_SIL[ltrs_SIL$Molecule.Name %in% SILs, ])/length(SILs)))

plot_list <- vector(mode = "list", length = 0)
plate_lines <- vector(mode = "list", length = 0)

for (x in 1:length(SILs)) { #for each ISTD
  temp_data <- ltrs_SIL[ltrs_SIL$Molecule.Name==SILs[x],]
  # #reorder p011 to be at the end as this was the order of acquisition
  # temp_data <- rbind(temp_data_unordered[9:80,], temp_data_unordered[1:8,])
  
  sample_count <- 0
  
  for (y in 1:n_plates) {
    sample_count = sample_count + n_ltrs_per_plate[y]
    plate_lines[[y]] <- list(type='line', 
                      x0=sample_count+0.5, 
                      x1=sample_count+0.5, 
                      y0=0, 
                      y1=max(temp_data$Area),
                      line=list(dash='dot', width=2, color = '#808080'))
  }
  color_value <- ifelse(SILs_edited[x] %in% pos_SILs, '#FF0000', '#0000FF')
  
  plot <- plot_ly(x = sample_id, 
                  y = temp_data$Area, 
                  type = 'scatter', 
                  mode = 'markers',
                  # color = color_value,
                  # colors = c('red', 'blue', 'yellow'),
                  text = paste(temp_data$File.Name),
                  showlegend = FALSE
                  )%>%
                    layout(title = "ISTD peak area",
                    shapes = plate_lines, 
                    annotations = list(x = 0.5 , y = 1.1, showarrow = F, 
                                       xref='paper', yref='paper',
                                       xanchor='center',
                                       text = SILs[x], 
                                       font = list(color = color_value)),
                    yaxis = list(rangemode = 'tozero'))
  
  plot_list = c(plot_list, list(plot))
}

# fig1 <- subplot(plot_list[1:20], nrows = 4)
# fig2 <- subplot(plot_list[21:40], nrows = 4)
# fig3 <- subplot(plot_list[41:length(plot_list)], nrows = 4)
# 
# 
# fig1
# fig2
# fig3

figA <- subplot(plot_list, nrows = 14)
figA

# kaleido(tagList(fig1, fig2, fig3), #the graph to export
               # file = "F:\\R2D2 vs C3PO comparison\\ISTDPeakAreas.png") #the name and type of file (can be .png, .jpeg, etc.)

# htmltools::save_html(tagList(fig1, fig2, fig3), file = "F:\\R2D2 vs C3PO comparison\\ISTDPeakAreas.html")

# #specify path to save PDF to
# destination = 'F:\\R2D2 vs C3PO comparison\\ISTDPeakAreas.pdf'
# 
# #open PDF
# pdf(file="F:\\R2D2 vs C3PO comparison\\ISTDPeakAreas.pdf")
# 
# #save plots to PDF
# subplot(plot_list[1:24], nrows = 4)
# subplot(plot_list[25:48], nrows = 4)
# subplot(plot_list[49:length(plot_list)], nrows = 4)
# 
# #turn off PDF plotting
# dev.off()

#BEWARE: any LTRs with run order number >99 will be plotted before the others in the plate
```

```{r echo=FALSE}
#use only analogue analytes
ltrs_analogues <- ltrs[ltrs$Molecule.Name %in% ISTD_analogue_array$Analogue, ]
# plot peak area of analogue analytes in LTRs
sample_id <- c(1:(nrow(ltrs_analogues)/length(ISTD_analogue_array$Analogue)))

plot_list <- vector(mode = "list", length = 0)
plate_lines <- vector(mode = "list", length = 0)

for (x in 1:length(ISTD_analogue_array$Analogue)) { #for each ISTD
  temp_data<- ltrs_analogues[ltrs_analogues$Molecule.Name==ISTD_analogue_array$Analogue[x],]
  # #reorder p011 to be at the end as this was the order of acquisition
  # temp_data <- rbind(temp_data_unordered[9:80,], temp_data_unordered[1:8,])
  sample_count <- 0
  
  for (y in 1:n_plates) {
    sample_count = sample_count + n_ltrs_per_plate[y]
    plate_lines[[y]] <- list(type='line', 
                      x0=sample_count+0.5, 
                      x1=sample_count+0.5, 
                      y0=0, 
                      y1=max(temp_data$Area),
                      line=list(dash='dot', width=2, color = '#808080'))
  }
  color_value <- ifelse(SILs_edited[x] %in% pos_SILs, '#FF0000', '#0000FF')
  
  plot <- plot_ly(x = sample_id, 
                  y = temp_data$Area, 
                  type = 'scatter', 
                  mode = 'markers', 
                  text = paste(temp_data$File.Name),
                  showlegend = FALSE
                  )%>%
                    layout(title = "Analogue analyte peak area",
                    shapes = plate_lines, 
                    annotations = list(x = 0.5 , y = 1.1, showarrow = F, 
                                       xref='paper', yref='paper',
                                       xanchor='center',
                                       text = ISTD_analogue_array$Analogue[x], 
                                       font = list(color = color_value)),
                    yaxis = list(rangemode = 'tozero'))
  
  plot_list = c(plot_list, list(plot))
}

# fig4 <- subplot(plot_list[1:20], nrows = 4)
# fig5 <- subplot(plot_list[21:40], nrows = 4)
# fig6 <- subplot(plot_list[41:length(plot_list)], nrows = 4)
# 
# 
# fig4
# fig5
# fig6

figB <- subplot(plot_list, nrows = 14)
figB

#htmltools::save_html(tagList(fig1, fig2, fig3), file = "F:\\R2D2 vs C3PO comparison\\AnalogueAnalytePeakAreas.html")
```

```{r include=FALSE}
#make data frame for all LTRs, with peak area for analogue and corresponding ISTD
analogue_response_ratio_array <- data.frame(ltrs_analogues)
#rename 'area' as 'analogue_area'
colnames(analogue_response_ratio_array)[9] <- "analogue_area"
for (x in 1:nrow(ltrs_analogues)) {
  #fill in ISTD column with each analogue's corresponding ISTD
  analogue_response_ratio_array$ISTD[x] <- ISTD_analogue_array$ISTD[which(ISTD_analogue_array$Analogue==ltrs_analogues$Molecule.Name[x])] 
  #fill in ISTD_area column with the corresponding ISTD's peak area
  analogue_response_ratio_array$ISTD_area[x] <- ltrs_SIL[which(ltrs_SIL$File.Name == analogue_response_ratio_array$File.Name[x] & ltrs_SIL$Molecule.Name == analogue_response_ratio_array$ISTD[x]), 'Area']
}

#fill in response_ratio column with analogue_area/ISTD_area
analogue_response_ratio_array$response_ratio <- analogue_response_ratio_array$analogue_area/analogue_response_ratio_array$ISTD_area
```

```{r echo=FALSE}
# plot response ratio of analogue analytes in LTRs
sample_id <- c(1:(nrow(analogue_response_ratio_array)/length(unique(analogue_response_ratio_array$Molecule.Name))))

plot_list <- vector(mode = "list", length = 0)
plate_lines <- vector(mode = "list", length = 0)

for (x in 1:length(unique(analogue_response_ratio_array$Molecule.Name))) { #for each analogue
  temp_data <- analogue_response_ratio_array[analogue_response_ratio_array$Molecule.Name==ISTD_analogue_array$Analogue[x],]
  # #reorder p011 to be at the end as this was the order of acquisition
  # temp_data <- rbind(temp_data_unordered[9:80,], temp_data_unordered[1:8,])
  sample_count <- 0
  
  for (y in 1:n_plates) {
    sample_count = sample_count + n_ltrs_per_plate[y]
    plate_lines[[y]] <- list(type='line', 
                      x0=sample_count+0.5, 
                      x1=sample_count+0.5, 
                      y0=0, 
                      y1=max(temp_data$response_ratio),
                      line=list(dash='dot', width=2, color = '#808080'))
  }
  color_value <- ifelse(SILs_edited[x] %in% pos_SILs, '#FF0000', '#0000FF')
  
  plot <- plot_ly(x = sample_id, 
                  y = temp_data$response_ratio, 
                  type = 'scatter', 
                  mode = 'markers', 
                  text = paste(temp_data$File.Name),
                  showlegend = FALSE
                  )%>%
                    layout(title = paste("Response Ratios"),
                    shapes = plate_lines, 
                    annotations = list(x = 0.5 , y = 1.1, showarrow = F, 
                                       xref='paper', yref='paper',
                                       xanchor='center',
                                       text = paste(unique(analogue_response_ratio_array$Molecule.Name)[x], " with ", unique(analogue_response_ratio_array$ISTD)[x]), 
                                       font = list(color = color_value)),
                    yaxis = list(rangemode = 'tozero'))
  
  plot_list = c(plot_list, list(plot))
}

# fig7 <- subplot(plot_list[1:20], nrows = 4)
# fig8 <- subplot(plot_list[21:40], nrows = 4)
# fig9 <- subplot(plot_list[41:length(plot_list)], nrows = 4)
# 
# 
# fig7
# fig8
# fig9

figC <- subplot(plot_list, nrows = 14, heights = c(rep(1/14, 14)))
figC

#htmltools::save_html(tagList(fig1, fig2, fig3), file = "F:\\R2D2 vs C3PO comparison\\ResponseRatios.html")
```


